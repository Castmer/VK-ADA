'''
    28.7 Обращения к атрибутам: __getattr__ и __setattr__
    28.8 Строковое представление объектов: __repr__ и __str__
    28.9 Правостороннее сложение и операция приращения:
    28.10 __radd__ и __iadd__
    28.11 Операция вызова: __call__
    28.12 Функциональные интерфейсы и программный код обратного вызова
    28.13 Сравнивание: __lt__, __gt__ и другие
    28.14 Проверка логического значения: __bool__ и __len__
    28.15 В заключение
    28.16 Закрепление пройденного
----Глава 29. Шаблоны проектирования с классами
    29.1 Python и ООП
    29.2 ООП и наследование: взаимосвязи типа «является»
    29.3 ООП и композиция: взаимосвязи типа «имеет»
    29.4 ООП и делегирование: объекты--обертки
    29.5 Псевдочастные атрибуты класса
    29.6 Методы – это объекты: связанные и несвязанные методы
    29.8 Множественное наследование: примесные классы
    29.9 Классы – это объекты: универсальные фабрики объектов
    29.10 Прочие темы, связанные с проектированием
    29.11 В заключение
    29.12 Закрепление пройденного
----Глава 30. Дополнительные возможности классов
    30.1 Расширение встроенных типов
    30.2 Классы «нового стиля»
    30.3 Изменения в классах нового стиля
    30.4 Другие расширения в классах нового стиля
    30.5 Статические методы и методы класса
    30.6 Декораторы и метаклассы: часть 1
    30.7 Типичные проблемы при работе с классами
    30.8 В заключение
    30.9 Закрепление пройденного
----Глава 31. Основы исключений
    31.1 Зачем нужны исключения?
    31.2 Обработка исключений: краткий обзор
    31.3 В заключение
    31.4 Закрепление пройденного
----Глава 32. Особенности использования исключений
    32.1 Инструкция try/except/else
    32.2 Инструкция try/finally
    32.3 Объединенная инструкция try/except/finally
    32.4 Инструкция raise
    32.5 Инструкция assert
    32.6 Контекстные менеджеры with/as
    32.7 В заключение
    32.8 Закрепление пройденного
----Глава 33. Объекты исключений
    33.1 Исключения: назад в будущее
    33.2 Исключения на основе классов
    33.3 В чем преимущества иерархий исключений?
    33.4 Классы встроенных исключений
    33.5 Определение текста исключения
    33.6 Передача данных в экземплярах и реализация поведения
    33.7 В заключение
    33.8 Закрепление пройденного
----Глава 34. Использование исключений
    34.1 Вложенные обработчики исключений
    34.2 Идиомы исключений
    34.3 Советы по применению и типичные проблемы исключений
    34.4 Заключение по основам языка
    34.5 В заключение
    34.6 Закрепление пройденного
----Глава 35. Юникод и строки байтов
    35.1 Изменения в Python 3.0, касающиеся строк
    35.2 Основы строк
    35.3 Примеры использования строк в Python 3.0
    35.4 Кодирование строк Юникода
    35.5 Использование объектов bytes в Python 3.0
    35.6 Использование объектов bytearray в 3.0 (и 2.6)
    35.7 Использование текстовых и двоичных файлов
    35.8 Использование файлов Юникода
    35.9 Другие инструменты для работы со строками в Python 3.0
    35.10 В заключение
    35.11 Закрепление пройденного
----Глава 36. Управляемые атрибуты
    36.1 Зачем нужно управлять атрибутами?
    36.2 Свойства
    36.3 Дескрипторы
    36.4 __getattr__ и __getattribute__
    36.5 Пример: проверка атрибутов
    36.6 В заключение
    36.7 Закрепление пройденного
----Глава 37. Декораторы
    37.1 Что такое декоратор?
    37.2 Основы
    37.3 Программирование декораторов функций
    37.4 Программирование декораторов классов
    37.5 Непосредственное управление функциями и классами
    37.6 Пример: «частные» и «общедоступные» атрибуты
    37.7 Пример: проверка аргументов функций
    37.8 В заключение
    37.9 Закрепление пройденного
----Глава 38. Метаклассы
    38.1 Нужны или не нужны метаклассы
    38.2 Модель метаклассов
    38.3 Объявление метаклассов
    38.4 Программирование метаклассов
    38.5 Пример: добавление методов в классы
    38.6 Пример: применение декораторов к методам
    38.7 В заключение
    38.8 Закрепление пройденного
----Приложения:
----Приложение A. Установка и настройка
----Установка интерпретатора Python
----Настройка Python '''

'''
----Параметры командной строки интерпретатора
----Дополнительная информация
----Приложение B. Решения упражнений
'''