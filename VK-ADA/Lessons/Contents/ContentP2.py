'''
    16.3 Области видимости и вложенные функции
    16.4 Инструкция nonlocal
    16.5 В заключение
    16.6 Закрепление пройденного
----Глава 17. Аргументы
    17.1 Передача аргументов
    17.2 Специальные режимы сопоставления аргументов
    17.3 Функция поиска минимума
    17.4 Универсальные функции для работы с множествами
    17.5 Имитация функции print в Python 3.0
    17.6 В заключение
    17.7 Закрепление пройденного
----Глава 18. Расширенные возможности функций
    18.1 Концепции проектирования функций
    18.2 Рекурсивные функции
    18.3 Функции – это объекты: атрибуты и аннотации
    18.4 Анонимные функции: lambda
    18.5 Отображение функций на последовательности: map
    18.6 Средства функционального программирования:
    18.7 filter и reduce
    18.8 В заключение
    18.9 Закрепление пройденного
----Глава 19. Итераторы и генераторы
    19.1 Еще раз о генераторах списков:
    19.2 функциональные инструменты
    19.3 Еще раз об итераторах: генераторы
    19.4 Краткая сводка по синтаксису генераторов в 3.0
    19.5 Хронометраж итерационных альтернатив
    19.6 Типичные ошибки при работе с функциями
    19.7 В заключение
    19.8 Закрепление пройденного
----Глава 20. Модули: общая картина
    20.1 Зачем нужны модули?
    20.2 Архитектура программы на языке Python
    20.3 Как работает импорт
    20.4 Путь поиска модулей
    20.5 В заключение
    20.6 Закрепление пройденного
----Глава 21. Основы программирования модулей
    21.1 Создание модуля
    21.2 Использование модулей
    21.3 Пространства имен модулей
    21.4 Повторная загрузка модулей
    21.5 В заключение
    21.6Закрепление пройденного
----Глава 22. Пакеты модулей
    22.1 Основы операции импортирования пакетов
    22.2 Пример импортирования пакета
    22.3 Когда используется операция импортирования пакетов?
    22.4 Импортирование относительно пакета
    22.5 В заключение
    22.6 Закрепление пройденного
----Глава 23. Дополнительные возможности модулей
    23.1 Сокрытие данных в модулях
    23.2 Включение будущих возможностей языка
    23.3 Смешанные режимы использования:
    23.4 __name__ и __main__
    23.5 Изменение пути поиска модулей
    23.6 Расширение as для инструкций import и from
    23.7 Модули – это объекты: метапрограммы
    23.8 Импортирование модулей по имени в виде строки
    23.9 Транзитивная перезагрузка модулей
    23.10 Концепции проектирования модулей
    23.11 Типичные проблемы при работе с модулями
    23.12 В заключение
    23.13 Закрепление пройденного
----Глава 24. ООП: общая картина
    24.1 Зачем нужны классы?
    24.2 ООП с высоты 30 000 футов
    24.3 В заключение
    24.4 Закрепление пройденного
----Глава 25. Основы программирования классов
    25.1 Классы генерируют множество экземпляров объектов
    25.2 Классы адаптируются посредством наследования
    25.3 Классы могут переопределять операторы языка Python
    25.4 Самый простой в мире класс на языке Python
    25.5 Классы и словари
    25.6 В заключение
    25.7 Закрепление пройденного
----Глава 26. Более реалистичный пример
    26.1 Шаг 1: создание экземпляров
    26.2 Шаг 2: добавление методов, определяющих поведение
    26.3 Шаг 3: перегрузка операторов
    26.4 Шаг 4: адаптация поведения с помощью подклассов
    26.5 Шаг 5: адаптация конструкторов
    26.6 Шаг 6: использование инструментов интроспекции
    26.7 Шаг 7 (последний): сохранение объектов в базе данных
    26.8 Рекомендации на будущее
    26.9 В заключение
    26.10 Закрепление пройденного
----Глава 27. Подробнее о программировании классов
    27.1 Инструкция class
    27.2 Методы
    27.3 Наследование
    27.4 Пространства имен: окончание истории
    27.5 Еще раз о строках документирования
    27.6 Классы и модули
    27.7 В заключение
    27.8 Закрепление пройденного
----Глава 28. Перегрузка операторов
    28.1 Доступ к элементам по индексу и извлечение срезов:
    28.2 __getitem__ и __setitem__
    28.3 Итерации по индексам: __getitem__
    28.4 Итераторы: __iter__ и __next__
    28.5 Проверка на вхождение:
    28.6 __contains__, __iter__ и __getitem__
'''

